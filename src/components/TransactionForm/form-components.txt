/**
 * Enhanced Form Components Implementation
 * 
 * Implements a comprehensive set of form components designed to handle
 * real estate transaction data based on Command intake grid schema.
 */

// src/forms/components/TransactionForm.tsx
import React, { useReducer, useCallback } from 'react';
import { TransactionContext } from '../context/TransactionContext';
import { FormProgress } from './FormProgress';
import { ErrorBoundary } from './ErrorBoundary';
import { formReducer, initialState } from '../reducers/formReducer';
import { DocumentManager } from '../services/documentManager';
import { CommandAPIService } from '../services/commandSync';

const documentManager = new DocumentManager();
const commandService = new CommandAPIService();

export const TransactionForm: React.FC = () => {
  const [state, dispatch] = useReducer(formReducer, initialState);

  const handleSubmit = useCallback(async () => {
    dispatch({ type: 'START_SUBMIT' });
    try {
      await commandService.submitTransaction(state.data);
      dispatch({ type: 'COMPLETE_SUBMIT' });
    } catch (error) {
      dispatch({ 
        type: 'SET_ERROR', 
        path: 'form',
        error: 'Submission failed. Please try again.'
      });
    }
  }, [state.data]);

  return (
    <ErrorBoundary>
      <TransactionContext.Provider value={{ state, dispatch }}>
        <form onSubmit={handleSubmit} className="transaction-form">
          <FormProgress
            currentStep={state.metadata.currentStep}
            completedSteps={state.metadata.completedSteps}
          />
          
          <div className="form-sections">
            {state.metadata.currentStep === 0 && <RoleSection />}
            {state.metadata.currentStep === 1 && <PropertySection />}
            {state.metadata.currentStep === 2 && <ClientSection />}
            {state.metadata.currentStep === 3 && <CommissionSection />}
            {state.metadata.currentStep === 4 && <DocumentsSection />}
          </div>
          
          <FormNavigation
            onNext={() => dispatch({ type: 'NEXT_STEP' })}
            onPrev={() => dispatch({ type: 'PREV_STEP' })}
            isLastStep={state.metadata.currentStep === 4}
            canProceed={!Object.keys(state.metadata.errors).length}
          />
        </form>
      </TransactionContext.Provider>
    </ErrorBoundary>
  );
};

// src/forms/components/PropertySection.tsx
export const PropertySection: React.FC = () => {
  const { state, dispatch } = useTransactionContext();
  const validation = useValidation(propertySchema);
  
  const handleSalePriceChange = useCallback((value: string) => {
    const numericValue = value.replace(/[^\d.]/g, '');
    const formattedValue = formatCurrency(numericValue);
    
    dispatch({
      type: 'UPDATE_FIELD',
      path: 'salePrice',
      value: formattedValue
    });

    // Update commission calculations if needed
    if (state.data.commissionBase === 'Full Price') {
      const commission = calculateCommission(numericValue, state.data.totalCommission);
      dispatch({
        type: 'UPDATE_FIELD',
        path: 'listingAgentCommission',
        value: commission.listing
      });
      dispatch({
        type: 'UPDATE_FIELD',
        path: 'buyersAgentCommission',
        value: commission.buyers
      });
    }
  }, [dispatch, state.data.commissionBase, state.data.totalCommission]);

  return (
    <FormSection title="Property Information">
      <FieldGroup>
        <MoneyField
          label="Sale Price"
          value={state.data.salePrice}
          onChange={handleSalePriceChange}
          error={validation.getError('salePrice')}
          required
        />
        
        <MLSField
          value={state.data.mlsNumber}
          onChange={(value) => dispatch({
            type: 'UPDATE_FIELD',
            path: 'mlsNumber',
            value
          })}
          error={validation.getError('mlsNumber')}
        />
        
        <AddressAutocomplete
          value={state.data.propertyAddress}
          onChange={(value) => dispatch({
            type: 'UPDATE_FIELD',
            path: 'propertyAddress',
            value
          })}
          onSelect={handleAddressSelect}
          error={validation.getError('propertyAddress')}
          required
        />
      </FieldGroup>
      
      <FieldGroup title="Property Status">
        <Select
          label="Property Status"
          value={state.data.propertyStatus}
          options={[
            { value: 'Vacant',